-- fix for CBCAXUPIISSLOG-640
DECLARE
	i_BODY_QUERY CLOB;
BEGIN 

-- ATM Availability
	i_BODY_QUERY := TO_CLOB('		
	with nonExistsStation as (
  select ash_ast_id, ash_operation_status,
    ROW_NUMBER() over (partition by ash_ast_id order by ash_timestamp DESC) as rn
  from atm_status_history 
  where ash_timestamp < TO_DATE({From_Date}, ''YYYYMMDD HH24:MI:SS'')
)
SELECT
    AST.AST_ARE_NAME "REGION",
    ABR.ABR_CODE "BRANCH CODE",
    SUBSTR(AST.AST_TERMINAL_ID, -4) "TERMINAL",
    AST.AST_ALO_LOCATION_ID "LOCATION",
    AST.AST_ID "STATION ID",
    case when NES.ASH_OPERATION_STATUS = ''In service'' then 0 else 100 end "UNAVAILABLE",
    case when NES.ASH_OPERATION_STATUS = ''In service'' then 100 else 0 end  "AVAILABLE",
    case when NES.ASH_OPERATION_STATUS = ''In service'' then ''1'' else ''0'' end "STANDARD"
FROM
    ATM_STATIONS AST
    JOIN ATM_BRANCHES ABR ON AST.AST_ABR_ID = ABR.ABR_ID
    LEFT JOIN nonExistsStation NES on AST.AST_ID = NES.ASH_AST_ID and NES.RN = 1
WHERE
	AST_ALO_LOCATION_ID NOT LIKE ({V_IE_Iss_Name} || ''%'')
	AND AST.AST_ACO_ID NOT IN (1722,1723)
    AND AST_ID NOT IN (
      select distinct(ATD_AST_ID) from ATM_DOWNTIME ATD WHERE {Txn_Date}
    )
UNION 
(SELECT
     AST.AST_ARE_NAME "REGION",
     ABR.ABR_CODE "BRANCH CODE",
     SUBSTR(AST.AST_TERMINAL_ID, -4) "TERMINAL",
     AST.AST_ALO_LOCATION_ID "LOCATION",
     AST.AST_ID "STATION ID",
     round(SUM((cast(atd_end_timestamp as DATE) - cast (atd_start_timestamp as DATE)) * 86400 / {Total_Day} * 100), 2) "UNAVAILABLE",
     NVL(round(100 - (SUM((cast(atd_end_timestamp as DATE) - cast (atd_start_timestamp as DATE)) * 86400 / {Total_Day} * 100)), 2) , 100) "AVAILABLE",    
     CASE WHEN SUM((cast(atd_end_timestamp as DATE) - cast (atd_start_timestamp as DATE)) * 86400 / {Total_Day} * 100) < 5 THEN ''1'' ELSE ''0'' END "STANDARD"
FROM
      ATM_STATIONS AST
      JOIN ATM_BRANCHES ABR ON AST.AST_ABR_ID = ABR.ABR_ID
      JOIN ATM_DOWNTIME ATD ON AST.AST_ID = ATD_AST_ID AND {Txn_Date}
WHERE
	AST_ALO_LOCATION_ID NOT LIKE ({V_IE_Iss_Name} || ''%'')
    AND AST.AST_ID in (select distinct(ASH_AST_ID) from ATM_STATUS_HISTORY) 
GROUP BY
      AST.AST_ARE_NAME,
      ABR.ABR_CODE,
      AST.AST_TERMINAL_ID,
      AST.AST_ALO_LOCATION_ID,
      AST.AST_ID
)
ORDER BY
      REGION  ASC,
      "BRANCH CODE" ASC,
      TERMINAL ASC,
      LOCATION ASC
	');
	
	UPDATE REPORT_DEFINITION set RED_BODY_QUERY = i_BODY_QUERY where RED_NAME = 'ATM Availability';
	
-- ATM Cash Level
	i_BODY_QUERY := TO_CLOB('		
select MAIN.*,
  CASE WHEN "LOAD PERCENTAGE" < 20 THEN ''LV''
  WHEN "LOAD PERCENTAGE" < 35 THEN ''M''
  WHEN "LOAD PERCENTAGE" < 40 THEN ''HV''
  WHEN "LOAD PERCENTAGE" < 45 THEN ''VIP'' END AS "CLASSIFICATION"
from (
select 
    AST.AST_ARE_NAME "REGION",
    AST.AST_TERMINAL_ID "TERMINAL",
    AST.AST_ALO_LOCATION_ID "LOCATION",
    DVT.LOAD_DATE "DATE OF LOADING",
    DVT.LOAD_100 * 100 "LOAD 100",
    DVT.LOAD_200 * 200 "LOAD 200",
    DVT.LOAD_500 * 500 "LOAD 500",
    DVT.LOAD_1000 * 1000 "LOAD 1000",
    (DVT.LOAD_100 * 100) + (DVT.LOAD_200 * 200) + (DVT.LOAD_500 * 500) + (DVT.LOAD_1000 * 1000) "TOTAL CASH LOADED", 
    ADS.POS_100 "CURRENT 100 POS",
    ADS.POS_200 "CURRENT 200 POS",
    ADS.POS_500 "CURRENT 500 POS",
    ADS.POS_1000 "CURRENT 1000 POS",
    ADS.POS_100 * 100 "CURRENT 100 VALUE",
    ADS.POS_200 * 200 "CURRENT 200 VALUE",
    ADS.POS_500 * 500 "CURRENT 500 VALUE",
    ADS.POS_1000 * 1000 "CURRENT 1000 VALUE",
    (ADS.POS_100 * 100) + (ADS.POS_200 * 200) + (ADS.POS_500 * 500) + (ADS.POS_1000 * 1000) "TOTAL CASH VALUE",
    round((ADS.POS_100 * 100 + ADS.POS_200 * 200 + ADS.POS_500 * 500 + ADS.POS_1000 * 1000)/(DVT.LOAD_100 * 100 + DVT.LOAD_200 * 200 + DVT.LOAD_500 * 500 + DVT.LOAD_1000 * 1000) * 100, 2) "LOAD PERCENTAGE",
    CASE WHEN ATS.ATS_CASH_DISPENSE_POSSIBLE = ''Yes'' THEN ''CASH LEVEL - GOOD'' ELSE ''FOR LOADING'' END AS "CASH STATUS",
    NVL(ATNC.DPOS_100,0) "DEPOSIT 100 POS",
    NVL(ATNC.DPOS_200,0) "DEPOSIT 200 POS",
    NVL(ATNC.DPOS_500,0) "DEPOSIT 500 POS",
    NVL(ATNC.DPOS_1000,0) "DEPOSIT 1000 POS",
    NVL(ATNC.DPOS_100,0) * 100 "DEPOSIT 100 VALUE",
    NVL(ATNC.DPOS_200,0) * 200 "DEPOSIT 200 VALUE",
    NVL(ATNC.DPOS_500,0) * 500 "DEPOSIT 500 VALUE",
    NVL(ATNC.DPOS_1000,0) * 1000 "DEPOSIT 1000 VALUE",   
    (NVL(ATNC.DPOS_100,0) * 100) + (NVL(ATNC.DPOS_200,0) * 200) + (NVL(ATNC.DPOS_500,0) * 500) + (NVL(ATNC.DPOS_1000,0) * 1000) "TOTAL DEPOSIT VALUE",
    ATS.ATS_OPERATION_STATUS "OPS STATUS"
from ATM_STATIONS AST 
join ATM_STATUS ATS ON AST.AST_ID = ATS.ATS_AST_ID 
join (select ATO_AST_ID, L_DATE LOAD_DATE, sum(L_100) LOAD_100, sum(L_200) LOAD_200, sum(L_500) LOAD_500, sum(L_1000) LOAD_1000, 
  ROW_NUMBER() OVER (PARTITION BY ATO_AST_ID  ORDER BY L_DATE DESC) rn from 
  (select ATO_AST_ID, TRUNC(ATO_TIMESTAMP) L_DATE, 
    CASE WHEN ATO_DENOMINATION = 100 THEN ATO_COUNTER ELSE 0 END L_100,
    CASE WHEN ATO_DENOMINATION = 200 THEN ATO_COUNTER ELSE 0 END L_200,
    CASE WHEN ATO_DENOMINATION = 500 THEN ATO_COUNTER ELSE 0 END L_500,
    CASE WHEN ATO_DENOMINATION = 1000 THEN ATO_COUNTER ELSE 0 END L_1000
  from ATM_DEVICE_TOTALS  
  where trim(ato_event) in (''Replenishment load'',''Replenishment reject'')
  )
  group by ATO_AST_ID, L_DATE
) DVT on DVT.ATO_AST_ID = AST.AST_ID
join (select ADS_AST_ID, sum(CURR_100) POS_100, sum(CURR_200) POS_200, sum(CURR_500) POS_500, sum(CURR_1000) POS_1000 from (
  select ADS_AST_ID,
  CASE WHEN ADS_DEVICE_DESCRIPTION = ''100 (Currency PHP)'' THEN (ADS_DEVICE_ADDITIONAL_DATA - ADS_DEVICE_DATA) ELSE 0 END CURR_100,
  CASE WHEN ADS_DEVICE_DESCRIPTION = ''200 (Currency PHP)'' THEN (ADS_DEVICE_ADDITIONAL_DATA - ADS_DEVICE_DATA) ELSE 0 END CURR_200,
  CASE WHEN ADS_DEVICE_DESCRIPTION = ''500 (Currency PHP)'' THEN (ADS_DEVICE_ADDITIONAL_DATA - ADS_DEVICE_DATA) ELSE 0 END CURR_500,
  CASE WHEN ADS_DEVICE_DESCRIPTION = ''1000 (Currency PHP)'' THEN (ADS_DEVICE_ADDITIONAL_DATA - ADS_DEVICE_DATA) ELSE 0 END CURR_1000
  from ATM_DEVICE_STATUS 
  where ADS_DEVICE_ID in (''Cassette 1'',''Cassette 2'',''Cassette 3'',''Cassette 4''))
group by ADS_AST_ID 
) ADS on ADS_AST_ID = AST.AST_ID 
left join (
  select ADS_AST_ID, sum(D_500) DPOS_500, sum(D_100) DPOS_100, sum(D_1000) DPOS_1000, sum(D_200) DPOS_200 from (
    select ADS_AST_ID,
      CASE WHEN ATCV_NOTE_TYPE = ''05'' THEN ATCV_NOTE_COUNT ELSE 0 END D_500,
      CASE WHEN ATCV_NOTE_TYPE = ''06'' THEN ATCV_NOTE_COUNT ELSE 0 END D_100,
      CASE WHEN ATCV_NOTE_TYPE = ''07'' THEN ATCV_NOTE_COUNT ELSE 0 END D_1000,
      CASE WHEN ATCV_NOTE_TYPE = ''08'' THEN ATCV_NOTE_COUNT ELSE 0 END D_200
    from ATM_DEVICE_STATUS 
    join ATM_SUMMARY_COUNTERS on ADS_DEVICE_ID=''Bunch Note Acceptor'' and ADS_ATNC_ID=ATNC_ID
    join ATM_SUMMARY_VALUES on ATNC_ID = ATCV_ATNC_ID 
  )
  group by ADS_AST_ID 
) ATNC on ATNC.ADS_AST_ID = AST.AST_ID
where 
	AST_ALO_LOCATION_ID NOT LIKE ({V_IE_Iss_Name} || ''%'')
	AND AST.AST_ACO_ID NOT IN (1722,1723) AND DVT.rn = 1
ORDER BY 
    "REGION" ASC,
    "TERMINAL" ASC,
    "LOCATION" ASC,
    "DATE OF LOADING" ASC
) MAIN
	');
	
	UPDATE REPORT_DEFINITION set RED_BODY_QUERY = i_BODY_QUERY where RED_NAME = 'ATM Cash Level';
	
END;
/